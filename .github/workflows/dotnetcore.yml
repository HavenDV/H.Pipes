name: .NET Core

on: [push]

jobs:
  build:
    strategy:
      matrix:
        dotnet: [ '3.1.100' ]
        os: [windows-latest]

    runs-on: ${{ matrix.os }}
    name: ${{ matrix.os }} - ${{ matrix.dotnet }}
    
    steps:
    - name: Getting context
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}
      run: echo "$GITHUB_CONTEXT"
      
    - name: Getting code
      uses: actions/checkout@v1
      
    - name: Getting Nuget cache
      if: runner.os == 'When the cache will be faster'
      uses: actions/cache@v1
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget
          
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{ matrix.dotnet }}
    
    - name: Build
      run: dotnet build --configuration Release --nologo
    
    - name: Run tests
      run: dotnet test --configuration Release --nologo
      
    - name: Try Publish(if the version has changed) H.Formatters
      if: runner.os == 'Windows' &&
          matrix.dotnet == '3.1.100'
      run: dotnet nuget push H.Formatters\bin\Release\H.Formatters.*.nupkg -k ${{ secrets.NUGET_KEY }} -s https://api.nuget.org/v3/index.json; exit 0
      
    - name: Try Publish(if the version has changed) H.Formatters.BinaryFormatter
      if: runner.os == 'Windows' &&
          matrix.dotnet == '3.1.100'
      run: dotnet nuget push H.Formatters.BinaryFormatter\bin\Release\H.Formatters.BinaryFormatter.*.nupkg -k ${{ secrets.NUGET_KEY }} -s https://api.nuget.org/v3/index.json; exit 0
      
    - name: Try Publish(if the version has changed) H.Formatters.Json
      if: runner.os == 'Windows' &&
          matrix.dotnet == '3.1.100'
      run: dotnet nuget push H.Formatters.Json\bin\Release\H.Formatters.Json.*.nupkg -k ${{ secrets.NUGET_KEY }} -s https://api.nuget.org/v3/index.json; exit 0
      
    - name: Try Publish(if the version has changed) H.Formatters.Wire
      if: runner.os == 'Windows' &&
          matrix.dotnet == '3.1.100'
      run: dotnet nuget push H.Formatters.Wire\bin\Release\H.Formatters.Wire.*.nupkg -k ${{ secrets.NUGET_KEY }} -s https://api.nuget.org/v3/index.json; exit 0
      
    - name: Try Publish(if the version has changed) H.Pipes
      if: runner.os == 'Windows' &&
          matrix.dotnet == '3.1.100'
      run: dotnet nuget push H.Pipes\bin\Release\H.Pipes.*.nupkg -k ${{ secrets.NUGET_KEY }} -s https://api.nuget.org/v3/index.json; exit 0
      
    - name: Try Publish(if the version has changed) H.Pipes.AccessControl
      if: runner.os == 'Windows' &&
          matrix.dotnet == '3.1.100'
      run: dotnet nuget push H.Pipes.AccessControl\bin\Release\H.Pipes.AccessControl.*.nupkg -k ${{ secrets.NUGET_KEY }} -s https://api.nuget.org/v3/index.json; exit 0
      
    - name: Try Publish(if the version has changed) NamedPipeServerStream.NetFrameworkVersion
      if: runner.os == 'Windows' &&
          matrix.dotnet == '3.1.100'
      run: dotnet nuget push NamedPipeServerStream.NetFrameworkVersion\bin\Release\NamedPipeServerStream.NetFrameworkVersion.*.nupkg -k ${{ secrets.NUGET_KEY }} -s https://api.nuget.org/v3/index.json; exit 0
